var documenterSearchIndex = {"docs":
[{"location":"tutorials/intro_page/#Examples","page":"Tutorials","title":"Examples","text":"","category":"section"},{"location":"tutorials/intro_page/","page":"Tutorials","title":"Tutorials","text":"Tutorials to be created soon.","category":"page"},{"location":"api/internal/#Internal-API","page":"Internal API Reference","title":"Internal API","text":"","category":"section"},{"location":"api/internal/","page":"Internal API Reference","title":"Internal API Reference","text":"Modules = [SiennaPRASInterface, PRAS]\nPublic = false","category":"page"},{"location":"api/internal/#SiennaPRASInterface.CC_RESTRICTIONS_UTIL_FILE","page":"Internal API Reference","title":"SiennaPRASInterface.CC_RESTRICTIONS_UTIL_FILE","text":"FILE with restrictions on CC units in PRAS\n\n\n\n\n\n","category":"constant"},{"location":"api/internal/#SiennaPRASInterface.HVDCLineTypes","page":"Internal API Reference","title":"SiennaPRASInterface.HVDCLineTypes","text":"Supported DC branch Types\n\n\n\n\n\n","category":"type"},{"location":"api/internal/#SiennaPRASInterface.OUTAGE_INFO_FILE","page":"Internal API Reference","title":"SiennaPRASInterface.OUTAGE_INFO_FILE","text":"DEFAULT outage data which is used when outage_flag is set to FALSE\n\nBased on ERCOT historical data\n\n\n\n\n\n","category":"constant"},{"location":"api/internal/#SiennaPRASInterface.TransformerTypes","page":"Internal API Reference","title":"SiennaPRASInterface.TransformerTypes","text":"Filtered Transformer Types\n\nThese transformers are not modeled as lines in PRAS.\n\n\n\n\n\n","category":"constant"},{"location":"api/internal/#SiennaPRASInterface.S2P_metadata","page":"Internal API Reference","title":"SiennaPRASInterface.S2P_metadata","text":"S2P_metadata\n\nStruct to store metadata for the Sienna to PRAS conversion\n\n\n\n\n\n","category":"type"},{"location":"api/internal/#SiennaPRASInterface.outage_data","page":"Internal API Reference","title":"SiennaPRASInterface.outage_data","text":"outage_data\n\nStruct to store the outage information for a component.\n\n\n\n\n\n","category":"type"},{"location":"api/internal/#SiennaPRASInterface.check_file-Tuple{String}","page":"Internal API Reference","title":"SiennaPRASInterface.check_file","text":"check_file(loc::String)\n\nCheck if the file exists and is openable.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.get_available_components_in_aggregation_topology-Tuple{Type{<:PowerSystems.StaticInjection}, PowerSystems.System, PowerSystems.AggregationTopology}","page":"Internal API Reference","title":"SiennaPRASInterface.get_available_components_in_aggregation_topology","text":"get_available_components_in_aggregation_topology(\n    type::Type{<:PSY.StaticInjection},\n    sys::PSY.System,\n    region::PSY.AggregationTopology,\n)\n\nGet available components in the AggregationTopology region of the given type.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.get_first_ts-Tuple{TS} where TS<:Channel{Any}","page":"Internal API Reference","title":"SiennaPRASInterface.get_first_ts","text":"get_first_ts(ts::TS)\n\nGet time series and handle components with no time series (such as unavailable)\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.get_generator_category-Tuple{PowerSystems.StaticInjection}","page":"Internal API Reference","title":"SiennaPRASInterface.get_generator_category","text":"get_generator_category(gen::StaticInjection)\n\nGet the category of the generator.\n\nArguments\n\ngen::StaticInjection: Generator\n\nReturns\n\nString: Category of the generator\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.get_sorted_lines-Tuple{Vector{PowerSystems.Branch}, Vector{String}}","page":"Internal API Reference","title":"SiennaPRASInterface.get_sorted_lines","text":"get_sorted_lines(lines::Vector{PSY.Branch}, region_names::Vector{String})\n\nGet sorted lines, interface region indices, and interface line indices.\n\nArguments\n\nlines::Vector{PSY.Branch}: Lines\nregion_names::Vector{String}: Region names\n\nReturns\n\nsorted_lines::Vector{PSY.Branch}: Sorted lines\ninterface_reg_idxs::Vector{Tuple{Int, Int}}: Interface region indices\ninterface_line_idxs::Vector{UnitRange{Int}}: Interface line indices\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.get_sorted_region_tuples-Tuple{Vector{PowerSystems.Branch}, Vector{String}}","page":"Internal API Reference","title":"SiennaPRASInterface.get_sorted_region_tuples","text":"get_sorted_region_tuples(lines::Vector{PSY.Branch}, region_names::Vector{String})\n\nGet sorted (regfrom, regto) tuples of inter-regional lines.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.get_timestamps-Union{Tuple{TIMEPERIOD}, Tuple{Dates.DateTime, TIMEPERIOD, Int64, Int64}} where TIMEPERIOD<:Dates.TimePeriod","page":"Internal API Reference","title":"SiennaPRASInterface.get_timestamps","text":"get_timestamps(initial_time, resolution, steps, horizon)\n\nReturn a vector of timestamps starting from initial_time with resolution and steps for horizon steps\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.get_ts_values-Tuple{InfrastructureSystems.TimeSeriesData}","page":"Internal API Reference","title":"SiennaPRASInterface.get_ts_values","text":"get_ts_values(ts::PSY.TimeSeriesData)\n\nGet the time series values.\n\nArguments\n\nts::TimeSeries: Time series\n\nReturns\n\nArray{Float64}: Time series values\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.initialize_availability!-Tuple{Random.AbstractRNG, Vector{Bool}, Vector{Int64}, Vector{PowerSystems.Generator}, Int64}","page":"Internal API Reference","title":"SiennaPRASInterface.initialize_availability!","text":"initializeavailability!(rng, availability, nexttransition, devices, tlast)\n\nArguments\n\nrng::Random.AbstractRNG: Random number generator\navailability::Vector{Bool}: Vector of availability status\nnexttransition::Vector{Int}: Vector of next transition time\ndevices::Vector{PSY.Generator}: Vector of devices with outage SupplementalAttributes\nt_last::Int: Last time step\n\nReturns\n\nModifies input arguments and rereturns\n\navailability::Vector{Bool}: Vector of availability status\nnexttransition::Vector{Int}: Vector of next transition time\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.line_rating-Tuple{PowerSystems.Branch}","page":"Internal API Reference","title":"SiennaPRASInterface.line_rating","text":"line_rating(line::Branch)\n\nGet the line rating.\n\nArguments\n\nline::Branch: Line\n\nReturns\n\nTuple{forward_capacity::Float64, backward_capacity::Float64}: Line rating\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.make_pras_interfaces-Tuple{Vector{PowerSystems.Branch}, Vector{Tuple{Int64, Int64}}, Vector{UnitRange{Int64}}, SiennaPRASInterface.S2P_metadata}","page":"Internal API Reference","title":"SiennaPRASInterface.make_pras_interfaces","text":"make_pras_interfaces(\n    sorted_lines::Vector{PSY.Branch},\n    interface_reg_idxs::Vector{Tuple{Int64, Int64}},\n    interface_line_idxs::Vector{UnitRange{Int64}},\n    s2p_meta::S2P_metadata,\n)\n\nConverts PSY branches and interaces indices into PRAS Lines and Interfaces.\n\nReturns\n\nnew_lines::PRAS.Lines: PRAS Lines\nnew_interfaces::PRAS.Interfaces: PRAS Interfaces\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.rate_to_probability-Tuple{Float64, Int64}","page":"Internal API Reference","title":"SiennaPRASInterface.rate_to_probability","text":"rate_to_probability(for_gen::Float64, mttr::Int64)\n\nConverts the forced outage rate and mean time to repair to the λ and μ parameters\n\nArguments\n\nfor_gen::Float64: Forced outage rate [1/T]\nmttr::Int64: Mean time to repair [T]\n\nReturns\n\nλ::Float64: Transition probability from online to offline [1/T]\nμ::Float64: Transition rate from offline to online [1/T]\n\nReference\n\nhttps://core.ac.uk/download/pdf/13643059.pdf\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.runchecks-Tuple{String}","page":"Internal API Reference","title":"SiennaPRASInterface.runchecks","text":"runchecks(sys_location::String)\n\nCheck if the System JSON file is serialized as well as other files required.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#SiennaPRASInterface.update_availability!-Tuple{Random.AbstractRNG, Vector{Bool}, Vector{Int64}, Vector{PowerSystems.Generator}, Int64, Int64}","page":"Internal API Reference","title":"SiennaPRASInterface.update_availability!","text":"update_availability!(rng, availability, nexttransition, devices, t_now, t_last)\n\nReturn availability and next transition with new randomness\n\n\n\n\n\n","category":"method"},{"location":"#SiennaPRASInterface.jl","page":"Welcome Page","title":"SiennaPRASInterface.jl","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"CurrentModule = SiennaPRASInterface","category":"page"},{"location":"#About","page":"Welcome Page","title":"About","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"SiennaPRASInterface.jl is a Julia package that provides an interface to PRAS.jl from Sienna's PowerSystem.jl's System data model.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"The Probabilistic Resource Adequacy Suite (PRAS) analyzes the resource adequacy of a bulk power system using Monte Carlo methods.","category":"page"},{"location":"#Getting-Started","page":"Welcome Page","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"To use SiennaPRASInterface.jl, you first need a System from PowerSystems.jl","category":"page"},{"location":"#.-Install","page":"Welcome Page","title":"1. Install","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"] add SiennaPRASInterface","category":"page"},{"location":"#.-Add-Data","page":"Welcome Page","title":"2. Add Data","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Add outage information to generators using the supplemental attribute GeometricDistributionForcedOutage.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"using PowerSystems\ntransition_data = GeometricDistributionForcedOutage(;\n    mean_time_to_recovery=10,  # Units of hours\n    outage_transition_probability=0.005,  # Probability for outage per hour\n)\ncomponent = get_component(Generator, sys, \"test_generator\")\nadd_supplemental_attribute!(sys, component, transition_data)","category":"page"},{"location":"#.-Calculate-Shortfalls-and-Expected-Unserved-Energy-on-System","page":"Welcome Page","title":"3. Calculate Shortfalls and Expected Unserved Energy on System","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"using SiennaPRASInterface\nmethod = SequentialMonteCarlo(samples=10_000, seed=1)\nshortfalls, = assess(sys, PowerSystems.Area, sequential_monte_carlo, Shortfall())\neue = EUE(shortfalls)","category":"page"},{"location":"#Documentation","page":"Welcome Page","title":"Documentation","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PRAS Documentation","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Pages = [\"api/public.md\", \"tutorials\"]\nDepth = 2","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"SiennaPRASInterface has been developed as part of the Transmission Planning Tools Maintenance project at the U.S. Department of Energy's National Renewable Energy Laboratory (NREL) funded by DOE Grid Deployment Office (GDO).","category":"page"},{"location":"api/public/#Public-API-Reference","page":"Public API Reference","title":"Public API Reference","text":"","category":"section"},{"location":"api/public/","page":"Public API Reference","title":"Public API Reference","text":"SiennaPRASInterface\ngenerate_pras_system\nPRAS\nSystemModel\nassess\nSequentialMonteCarlo\nShortfall\nSurplus\nFlow\nUtilization\nStorageEnergy\nGeneratorStorageEnergy\nLOLE\nEUE\nval\nstderror\ngenerate_outage_profile\ngenerate_csv_outage_profile\nadd_csv_time_series!\nadd_csv_time_series_single_stage!\nmake_generator_outage_draws!\nShortfallSamples\nSurplusSamples\nFlowSamples\nUtilizationSamples\nStorageEnergySamples\nGeneratorStorageEnergySamples\nGeneratorAvailability\nGeneratorStorageAvailability\nLineAvailability","category":"page"},{"location":"api/public/#SiennaPRASInterface","page":"Public API Reference","title":"SiennaPRASInterface","text":"PowerSystems Interface for Probabilistic Resource Adequacy Studies (PRAS)\n\nKey Functions\n\ngenerate_pras_system: convert PSY to PRAS model\nassess: assess PRAS model\n\nKey PRAS Types\n\nSystemModel: PRAS data structure\nSequentialMonteCarlo: method for PRAS analysis\nShortfall: PRAS metric for missing generation\nLOLE: PRAS metric for loss of load expectation\nEUE: PRAS metric for energy unserved expectation\n\n\n\n\n\n","category":"module"},{"location":"api/public/#SiennaPRASInterface.generate_pras_system","page":"Public API Reference","title":"SiennaPRASInterface.generate_pras_system","text":"generate_pras_system(sys::PSY.System, aggregation; kwargs...)\n\nSienna/Data PowerSystems.jl System is the input and an object of PRAS SystemModel is returned. ...\n\nArguments\n\nsys::PSY.System: Sienna/Data PowerSystems.jl System\naggregation<:PSY.AggregationTopology: \"PSY.Area\" (or) \"PSY.LoadZone\" {Optional}\navailability::Bool: Takes into account avaialability of StaticInjection components when building the PRAS System {Optional}\nlump_region_renewable_gens::Bool: Whether to lumps PV and Wind generators in a region because usually these generators don't have FOR data {Optional}\nexport_location::String: Export location of the .pras file ...\n\nReturns\n\n- `PRAS.SystemModel`: PRAS SystemModel object\n\nExamples\n\njulia> generate_pras_system(psy_sys)\nPRAS SystemModel\n\n\n\n\n\ngenerate_pras_system(sys_location::String, aggregation; kwargs...)\n\nGenerate a PRAS SystemModel from a Sienna/Data PowerSystems System JSON file.\n\nArguments\n\nsys_location::String: Location of the Sienna/Data PowerSystems System JSON file\naggregation::Type{AT}: Aggregation topology type\navailability::Bool: Availability of components in the System\nlump_region_renewable_gens::Bool: Lumping of region renewable generators\nexport_location::Union{Nothing, String}: Export location of the .pras file\n\nReturns\n\nPRAS.SystemModel: PRAS SystemModel\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SiennaPRASInterface.PRAS","page":"Public API Reference","title":"SiennaPRASInterface.PRAS","text":"PRAS\n\nModule for Probabilistic Resource Adequacy Studies (PRAS).\n\nRe-exported in SiennaPRASInterface\n\nSource\n\nhttps://github.com/NREL/PRAS.jl\n\n\n\n\n\n","category":"module"},{"location":"api/public/#SiennaPRASInterface.PRAS.PRASBase.SystemModel","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.PRASBase.SystemModel","text":"SystemModel\n\nSystemModel is the primary data structure for Probabilistic Resource Adequacy Studies (PRAS).\n\nYou can also load a SystemModel from an appropriately-formatted HDF5 file on disk.\n\nExamples\n\npras = SystemModel(\"path/to/pras.pras\")\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.assess","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.assess","text":"assess(system::SystemModel, method::SequentialMonteCarlo, resultspecs::ResultSpec...)\n\nRun a Sequential Monte Carlo simulation on a system using the method data and return resultspecs.\n\nArguments\n\nsystem::SystemModel: PRAS data structure\nmethod::SequentialMonteCarlo: method for PRAS analysis\nresultspecs::ResultSpec...: PRAS metric for metrics like Shortfall missing generation\n\nReturns\n\nresults::Tuple{Vararg{ResultAccumulator{SequentialMonteCarlo}}}: PRAS metric results\n\n\n\n\n\nassess(\n    sys::PSY.System,\n    aggregation::Type{AT},\n    method::PRAS.SimulationSpec,\n    resultsspecs::PRAS.ResourceAdequacy.ResultSpec...,\n) where {AT <: PSY.AggregationTopology}\n\nEstimate resource adequacy using Monte Carlo simulation.\n\nArguments\n\nsys::PSY.System: PowerSystems.jl system model\naggregation::Type{AT}: Aggregation topology to use in translating to PRAS\nmethod::PRAS.SimulationSpec: Simulation method to use\nresultsspec::PRAS.ResourceAdequacy.ResultSpec...: Results to compute\n\nReturns\n\nTuple of results from resultsspec: default is (ShortfallResult,)\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.SequentialMonteCarlo","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.SequentialMonteCarlo","text":"SequentialMonteCarlo(;\n    samples::Int=10_000,\n    seed::Integer=rand(UInt64),\n    verbose::Bool=false,\n    threaded::Bool=true\n)\n\nSequential Monte Carlo simulation parameters for PRAS analysis\n\nIt it recommended that you fix the random seed for reproducibility.\n\nArguments\n\nsamples::Int=10_000: Number of samples\nseed::Integer=rand(UInt64): Random seed\nverbose::Bool=false: Print progress\nthreaded::Bool=true: Use multi-threading\n\nReturns\n\nSequentialMonteCarlo: PRAS analysis method\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.Shortfall","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.Shortfall","text":"Shortfall\n\nShortfall metric represents lost load at regions and timesteps in ShortfallResult with a (regions, timestamps) matrix API.\n\nSeparate samples are averaged together into mean and std values.\n\nSee ShortfallSamples for all shortfall samples.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.Surplus","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.Surplus","text":"Surplus\n\nSurplus metric represents extra generation at regions and timestamps in a SurplusResults with a (regions, timestamps) matrix API.\n\nSeparate samples are averaged together into mean and std values.\n\nSee SurplusSamples for all surplus samples.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.Flow","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.Flow","text":"Flow\n\nFlow metric represents the flow between interfaces at timestamps in a FlowResult with a (interfaces, timestamps) matrix API.\n\nSeparate samples are averaged together into mean and std values.\n\nSee FlowSamples for all flow samples.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.Utilization","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.Utilization","text":"Utilization\n\nUtilization metric represents how much an interface between regions is used across timestamps in a UtilizationResult with a (interfaces, timestamps) matrix API.\n\nSeparate samples are averaged together into mean and std values.\n\nSee UtilizationSamples for all utilization samples.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.StorageEnergy","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.StorageEnergy","text":"StorageEnergy\n\nStorage energy represents the state-of-charge of storage resources at timestamps in a StorageEnergyResult with a (storages, timestamps) matrix API.\n\nSeparate samples are averaged together into mean and std values.\n\nSee StorageEnergySamples for all storage energy samples.\n\nSee GeneratorStorageEnergy for generator storage energy.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.GeneratorStorageEnergy","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.GeneratorStorageEnergy","text":"GeneratorStorageEnergy\n\nGenerator storage energy represents state-of-charge of generatorstorage resources at timestamps in a StorageEnergyResult with a (generatorstorages, timestamps) matrix API.\n\nSeparate samples are averaged together into mean and std values.\n\nSee GeneratorStorageEnergySamples for all generator storage energy samples.\n\nSee StorageEnergy for storage energy.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.LOLE","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.LOLE","text":"LOLE\n\nLoss of load expectation metric. Contains a mean and standard error estimate.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.EUE","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.EUE","text":"EUE\n\nExpected unserved energy expectation metric. Contains a mean and standard error estimate.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.generate_outage_profile","page":"Public API Reference","title":"SiennaPRASInterface.generate_outage_profile","text":"generate_outage_profile(pras_system,num_runs,psy_sys,num_scenarios,location)\n\nProcess the assess results to get timeseries of generator status and include this timeseries data to the corresponding component in PSY System and exported using to_json method (serializing the PSY System).\n\n...\n\nArguments\n\npras_system::PRAS.SystemModel: PRAS System\nnum_runs::Int64: Number of PRAS runs\npsy_sys::PSY.System: PSY System\nnum_scenarios::Int64: Number of scenarios of user interest.\nlocation::String: Location to store outage profile. ...\n\nExamples\n\njulia> generate_outage_profile(results, pras_sys, psy_sys, 1)\nPSY System exported using to_json method in InfrastructureSystems\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SiennaPRASInterface.generate_csv_outage_profile","page":"Public API Reference","title":"SiennaPRASInterface.generate_csv_outage_profile","text":"generate_outage_profile(pras_system,num_runs,psy_sys,num_scenarios,location)\n\nProcess the assess results to get timeseries of generator status and include this timeseries data to the corresponding component in PSY System and exported using to_json method (serializing the PSY System).\n\n...\n\nArguments\n\npras_system::PRAS.SystemModel: PRAS System\nnum_runs::Int64: Number of PRAS runs\npsy_sys::PSY.System: PSY System\nnum_scenarios::Int64: Number of scenarios of user interest.\nlocation::String: Location to store outage profile. ...\n\nExamples\n\njulia> generate_outage_profile(results, pras_sys, psy_sys, 1)\nPSY System exported using to_json method in InfrastructureSystems\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SiennaPRASInterface.add_csv_time_series!","page":"Public API Reference","title":"SiennaPRASInterface.add_csv_time_series!","text":"add_csv_time_series!(\n    sys_DA,\n    sys_RT,\n    outage_csv_location::String;\n    days_of_interest::Union{Nothing, UnitRange}=nothing,\n    add_scenario::Union{Nothing, Int}=nothing,\n)\n\nGenerates outage profile for two stage PowerSimulation and adds availability time series data to Generators in PSY System from CSV files.\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SiennaPRASInterface.add_csv_time_series_single_stage!","page":"Public API Reference","title":"SiennaPRASInterface.add_csv_time_series_single_stage!","text":"add_csv_time_series_single_stage!(\n    sys_DA,\n    outage_csv_location::String;\n    days_of_interest::Union{Nothing, UnitRange}=nothing,\n    add_scenario::Union{Nothing, Int}=nothing,\n)\n\nGenerates outage profile for single stage PowerSimulation and adds availability time series.\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SiennaPRASInterface.make_generator_outage_draws!","page":"Public API Reference","title":"SiennaPRASInterface.make_generator_outage_draws!","text":"make_generator_outage_draws!(\n    sys,\n    initial_time::Dates.DateTime=nothing,\n    resolution::TIMEPERIOD=nothing,\n    steps::Int=nothing,\n    horizon::Int=nothing,\n) where {TIMEPERIOD <: Dates.TimePeriod}\n\nAdds availability time series to the generators in the system.\n\nMain function to make generator outage draws.\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.ShortfallSamples","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.ShortfallSamples","text":"ShortfallSamples\n\nShortfallSamples metric represents lost load at regions and timesteps in ShortfallSamplesResult with a (regions, timestamps, samples) matrix API.\n\nSee Shortfall for averaged shortfall samples.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.SurplusSamples","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.SurplusSamples","text":"SurplusSamples\n\nSurplus samples represent extra generation at regions and timestamps in a SurplusSamplesResult with a (regions, timestamps, samples) matrix API.\n\nSee Surplus for sample-averaged surplus data.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.FlowSamples","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.FlowSamples","text":"FlowSamples\n\nFlow samples represent the flow between interfaces at timestamps, which has not been averaged across different samples. This presents a 3D matrix API (interfaces, timestamps, samples).\n\nSee Flow for sample-averaged flow data.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.UtilizationSamples","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.UtilizationSamples","text":"UtilizationSamples\n\nUtilization samples represent the utilization between interfaces at timestamps, which has not been averaged across different samples. This presents a 3D matrix API (interfaces, timestamps, samples).\n\nSee Utilization for averaged utilization samples.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.StorageEnergySamples","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.StorageEnergySamples","text":"StorageEnergySamples\n\nStorage energy samples represent the state-of-charge of storage resources at timestamps, which has not been averaged across different samples. This presents a 3D matrix API (storages, timestamps, samples).\n\nSee StorageEnergy for sample-averaged storage energy.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.GeneratorStorageEnergySamples","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.GeneratorStorageEnergySamples","text":"GeneratorStorageEnergySamples\n\nGenerator storage energy samples represent the state-of-charge of generatorstorage resources at timestamps, which has not been averaged across different samples. This presents a 3D matrix API (generatorstorages, timestamps, samples).\n\nSee GeneratorStorageEnergy for sample-averaged generator storage energy.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.GeneratorAvailability","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.GeneratorAvailability","text":"GeneratorAvailability\n\nGenerator availability represents the availability of generators at timestamps in a GeneratorAvailabilityResult with a (generators, timestamps, samples) matrix API.\n\nNo averaging occurs.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.GeneratorStorageAvailability","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.GeneratorStorageAvailability","text":"GeneratorStorageAvailability\n\nGenerator storage availability represents the availability of generatorstorage resources at timestamps in a GeneratorStorageAvailabilityResult with a (generatorstorages, timestamps, samples) matrix API.\n\nNo averaging occurs\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SiennaPRASInterface.PRAS.ResourceAdequacy.LineAvailability","page":"Public API Reference","title":"SiennaPRASInterface.PRAS.ResourceAdequacy.LineAvailability","text":"LineAvailability\n\nLine availability represents the availability of lines at timestamps in a LineAvailabilityResult with a (lines, timestamps, samples) matrix API.\n\nNo averaging occurs.\n\n\n\n\n\n","category":"type"}]
}
