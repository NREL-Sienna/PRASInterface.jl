var documenterSearchIndex = {"docs":
[{"location":"tutorials/intro_page/#Examples","page":"Tutorials","title":"Examples","text":"","category":"section"},{"location":"quick_start_guide/#Quick-Start-Guide","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quick_start_guide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"PRASInterface.jl is structured to enable stuff","category":"page"},{"location":"api/internal/#Internal-API","page":"Internal API Reference","title":"Internal API","text":"","category":"section"},{"location":"api/internal/","page":"Internal API Reference","title":"Internal API Reference","text":"Modules = [PRASInterface]\nPublic = false","category":"page"},{"location":"api/internal/#PRASInterface.PRAS.ResourceAdequacy.assess-Union{Tuple{AT}, Tuple{PowerSystems.System, Type{AT}, PRASInterface.PRAS.ResourceAdequacy.SimulationSpec, Vararg{PRASInterface.PRAS.ResourceAdequacy.ResultSpec}}} where AT<:PowerSystems.AggregationTopology","page":"Internal API Reference","title":"PRASInterface.PRAS.ResourceAdequacy.assess","text":"assess(\n    sys::PSY.System,\n    aggregation::Type{AT},\n    method::PRAS.SimulationSpec,\n    resultsspecs::PRAS.ResourceAdequacy.ResultSpec...,\n) where {AT <: PSY.AggregationTopology}\n\nEstimate resource adequacy using Monte Carlo simulation.\n\nArguments\n\nsys::PSY.System: PowerSystems.jl system model\naggregation::Type{AT}: Aggregation topology to use in translating to PRAS\nmethod::PRAS.SimulationSpec: Simulation method to use\nresultsspec::PRAS.ResourceAdequacy.ResultSpec...: Results to compute\n\nReturns\n\nTuple of results from resultsspec: default is (ShortfallResult,)\n\n\n\n\n\n","category":"method"},{"location":"#PowerSystems.jl","page":"Welcome Page","title":"PowerSystems.jl","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"CurrentModule = PRASInterface","category":"page"},{"location":"#Overview","page":"Welcome Page","title":"Overview","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PRASInterface.jl is a Julia package that provides blah blah","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PRASInterface has been developed as part of the Transmission Planning Tools Maintenance project at the U.S. Department of Energy's National Renewable Energy Laboratory (NREL) funded by DOE Grid Deployment Office (GDO).","category":"page"},{"location":"api/public/#Public-API-Reference","page":"Public API Reference","title":"Public API Reference","text":"","category":"section"},{"location":"api/public/","page":"Public API Reference","title":"Public API Reference","text":"Modules = [PRASInterface]\nPublic = true","category":"page"},{"location":"api/public/#PRASInterface.generate_csv_outage_profile-Tuple{PRASInterface.PRAS.PRASBase.SystemModel}","page":"Public API Reference","title":"PRASInterface.generate_csv_outage_profile","text":"generateoutageprofile(prassystem,numruns,psysys,numscenarios,location)\n\nProcess the assess results to get timeseries of generator status and include this timeseries data to the corresponding component in PSY System and exported using to_json method (serializing the PSY System).\n\n...\n\nArguments\n\npras_system::PRAS.SystemModel: PRAS System\nnum_runs::Int64: Number of PRAS runs\npsy_sys::PSY.System: PSY System\nnum_scenarios::Int64: Number of scenarios of user interest.\nlocation::String: Location to store outage profile. ...\n\nExamples\n\njulia> generate_outage_profile(results, pras_sys, psy_sys, 1)\nPSY System exported using to_json method in InfrastructureSystems\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PRASInterface.generate_outage_profile-Tuple{PRASInterface.PRAS.PRASBase.SystemModel, PowerSystems.System}","page":"Public API Reference","title":"PRASInterface.generate_outage_profile","text":"generateoutageprofile(prassystem,numruns,psysys,numscenarios,location)\n\nProcess the assess results to get timeseries of generator status and include this timeseries data to the corresponding component in PSY System and exported using to_json method (serializing the PSY System).\n\n...\n\nArguments\n\npras_system::PRAS.SystemModel: PRAS System\nnum_runs::Int64: Number of PRAS runs\npsy_sys::PSY.System: PSY System\nnum_scenarios::Int64: Number of scenarios of user interest.\nlocation::String: Location to store outage profile. ...\n\nExamples\n\njulia> generate_outage_profile(results, pras_sys, psy_sys, 1)\nPSY System exported using to_json method in InfrastructureSystems\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PRASInterface.generate_pras_system-Union{Tuple{AT}, Tuple{PowerSystems.System, Type{AT}}} where AT<:PowerSystems.AggregationTopology","page":"Public API Reference","title":"PRASInterface.generate_pras_system","text":"generate_pras_system(sys::PSY.System, aggregation; kwargs...)\n\nSienna/Data PowerSystems.jl System is the input and an object of PRAS SystemModel is returned. ...\n\nArguments\n\nsys::PSY.System: Sienna/Data PowerSystems.jl System\naggregation<:PSY.AggregationTopology: \"PSY.Area\" (or) \"PSY.LoadZone\" {Optional}\navailability::Bool: Takes into account avaialability of StaticInjection components when building the PRAS System {Optional}\nlump_region_renewable_gens::Bool: Whether to lumps PV and Wind generators in a region because usually these generators don't have FOR data {Optional}\nexport_location::String: Export location of the .pras file ...\n\nReturns\n\n- `PRAS.SystemModel`: PRAS SystemModel object\n\nExamples\n\njulia> make_pras_system(psy_sys)\nPRAS SystemModel\n\n\n\n\n\n","category":"method"}]
}
